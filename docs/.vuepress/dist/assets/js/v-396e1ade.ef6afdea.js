"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[20],{8249:(e,a,l)=>{l.r(a),l.d(a,{data:()=>t});const t={key:"v-396e1ade",path:"/css/render.html",title:"浏览器渲染原理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"渲染的本质",slug:"渲染的本质",children:[]},{level:2,title:"渲染的时间点",slug:"渲染的时间点",children:[]},{level:2,title:"渲染流程",slug:"渲染流程",children:[]},{level:2,title:"解析HTMl parse HTML",slug:"解析html-parse-html",children:[{level:3,title:"为什么要将HTML字符串解析为树形结构",slug:"为什么要将html字符串解析为树形结构",children:[]},{level:3,title:"解析HTML",slug:"解析html",children:[]},{level:3,title:"解析HTMl时碰到css代码怎么办",slug:"解析html时碰到css代码怎么办",children:[]},{level:3,title:"解析HTML时碰到js代码怎么办",slug:"解析html时碰到js代码怎么办",children:[]},{level:3,title:"js访问css内部样式，外部样式，内联样式表",slug:"js访问css内部样式-外部样式-内联样式表",children:[]}]},{level:2,title:"样式计算",slug:"样式计算",children:[{level:3,title:"属性计算过程",slug:"属性计算过程",children:[]}]},{level:2,title:"布局 layout",slug:"布局-layout",children:[{level:3,title:"包含块",slug:"包含块",children:[]},{level:3,title:"DOM树与layout树不是一一对应的",slug:"dom树与layout树不是一一对应的",children:[]},{level:3,title:"浏览器默认样式",slug:"浏览器默认样式",children:[]}]},{level:2,title:"分层 layer",slug:"分层-layer",children:[{level:3,title:"will-change",slug:"will-change",children:[]}]},{level:2,title:"绘制 paint",slug:"绘制-paint",children:[]},{level:2,title:"分块 Tiling",slug:"分块-tiling",children:[]},{level:2,title:"光栅化 raster",slug:"光栅化-raster",children:[]},{level:2,title:"画 draw",slug:"画-draw",children:[{level:3,title:"为什么合成线程不直接将结果交给硬件，而要先转交给浏览器GPU？",slug:"为什么合成线程不直接将结果交给硬件-而要先转交给浏览器gpu",children:[]},{level:3,title:"什么是 reflow？",slug:"什么是-reflow",children:[]},{level:3,title:"什么是 repaint？",slug:"什么是-repaint",children:[]},{level:3,title:"为什么 transform 的效率高？",slug:"为什么-transform-的效率高",children:[]}]}],filePathRelative:"css/render.md",git:{updatedTime:1723245435e3,contributors:[{name:"yzq",email:"1391795844@qq.com",commits:1}]}}},7731:(e,a,l)=>{l.r(a),l.d(a,{default:()=>k});var t=l(6252);const i=l.p+"assets/img/render-time.2e21ce48.png",s=l.p+"assets/img/image-16.edb62d41.png",r=l.p+"assets/img/image-2.abf3c6b7.png",n=l.p+"assets/img/image.25e988e6.png",h=l.p+"assets/img/image-1.0941960d.png",d=l.p+"assets/img/preAnalysis.74d1a9e5.png",c=l.p+"assets/img/image-3.1c7e1266.png",p=l.p+"assets/img/image-4.8b4016b5.png",o=l.p+"assets/img/image-5.fe24b31f.png",u=l.p+"assets/img/image-6.2fb0bce4.png",g=l.p+"assets/img/image-7.42288d13.png",m=l.p+"assets/img/image-8.7da24e71.png",f=l.p+"assets/img/image-9.06729d0e.png",b=l.p+"assets/img/image-10.b728e8d8.png",x=l.p+"assets/img/image-11.7a548a62.png",v=l.p+"assets/img/image-12.a556ba75.png",y=l.p+"assets/img/image-13.b4ae7368.png",M=l.p+"assets/img/image-14.264a6d1d.png",S=l.p+"assets/img/image-15.5bdbf26b.png",w=(0,t.uE)('<h1 id="浏览器渲染原理" tabindex="-1"><a class="header-anchor" href="#浏览器渲染原理" aria-hidden="true">#</a> 浏览器渲染原理</h1><h2 id="渲染的本质" tabindex="-1"><a class="header-anchor" href="#渲染的本质" aria-hidden="true">#</a> 渲染的本质</h2><p>将一个编译好的html文件经过多道程序转换为像素信息，将像素信息组合成可视化的页面</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 多重计算</span>\n    <span class="token comment">//每一行。每一列的像素点信息，交由cpu，gpu渲染处理</span>\n    <span class="token keyword">return</span> pixels；\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="渲染的时间点" tabindex="-1"><a class="header-anchor" href="#渲染的时间点" aria-hidden="true">#</a> 渲染的时间点</h2><p><img src="'+i+'" alt="Alt text"> 首先由网络线程通过通信拿到相应的html文件，将html文件生成一个渲染任务交由事件循环队列排队处理，到任务执行时，将任务交由渲染主线程进行渲染处理</p><h2 id="渲染流程" tabindex="-1"><a class="header-anchor" href="#渲染流程" aria-hidden="true">#</a> 渲染流程</h2><p><img src="'+s+'" alt="Alt text"></p><h2 id="解析html-parse-html" tabindex="-1"><a class="header-anchor" href="#解析html-parse-html" aria-hidden="true">#</a> 解析HTMl parse HTML</h2><h3 id="为什么要将html字符串解析为树形结构" tabindex="-1"><a class="header-anchor" href="#为什么要将html字符串解析为树形结构" aria-hidden="true">#</a> 为什么要将HTML字符串解析为树形结构</h3><p>因为对象结构容易处理，且较为清晰</p><h3 id="解析html" tabindex="-1"><a class="header-anchor" href="#解析html" aria-hidden="true">#</a> 解析HTML</h3><p><img src="'+r+'" alt="Alt text"> 渲染线程通过一系列的解析后会得到一个DOM树，一个CSSOM树</p><ul><li>DOM树(Document Object Model)：页面中的元素和文本，以树形结构相关联。在 JS 代码中，通过document对象可以访问和修改DOM树。而上图中的DOM树指的是浏览器底层由C++生成的DOM树。</li><li>CSS也会被解析成CSSOM（CSS Object Model），也是树形结构，根节点(StyleSheetList)是网页中所有的样式表，二级子节点可能包含内部样式表、外部样式表、内联样式表和浏览器默认样式表（取决于代码中是否有这些内容），如果有两个<link>，则会出现两个外部样式表节点。</li></ul><h3 id="解析html时碰到css代码怎么办" tabindex="-1"><a class="header-anchor" href="#解析html时碰到css代码怎么办" aria-hidden="true">#</a> 解析HTMl时碰到css代码怎么办</h3><p>由于渲染主线程工作量较大，需要另一个线程来帮他处理css代码，此时会启动一个预解析器线程来率先下载解析外部css文件，主线程碰到link标签会跳过处理，等待预解析器下载解析完成后，才进行处理，这样做防止解析css过程中阻塞html的解析，提高渲染效率</p><ul><li>预解析器 只关注link标签，不关注普通html <img src="'+n+'" alt="Alt text"></li></ul><h3 id="解析html时碰到js代码怎么办" tabindex="-1"><a class="header-anchor" href="#解析html时碰到js代码怎么办" aria-hidden="true">#</a> 解析HTML时碰到js代码怎么办</h3><p>同样会启动预解析器来下载js文件，但是当主线程碰到script标签时，会停止一切行为，等待js文件下载处理完成后才会进行后续渲染，这也是为什么js会阻塞渲染进程</p><ul><li>等待的原因为，js文件可能会修改生成的DOM结构树 <img src="'+h+'" alt="Alt text"></li></ul><h3 id="js访问css内部样式-外部样式-内联样式表" tabindex="-1"><a class="header-anchor" href="#js访问css内部样式-外部样式-内联样式表" aria-hidden="true">#</a> js访问css内部样式，外部样式，内联样式表</h3><p><img src="'+d+'" alt="Alt text"><strong>除了浏览器默认样式表，内部样式表、外部样式表、内联样式表都可以通过 JS 访问到。</strong></p><p>内部样式表和外部样式表：使用document.styleSheets可以访问到一个数组，元素是样式表对象。 <strong>使用document.styleSheets[0].addRule(&quot;div&quot;, &quot;border: 1px solid red important&quot;)可以让页面上的所有div标签的边框变成红色</strong>，这种做法与传统的“获取所有div标签，再设置其style”的做法不同。 <strong>掌握这种方式以后，渲染完成后给多个元素添加样式就无需获取全部样式，进行循环添加</strong></p><ul><li>styleSheetList 所有内部样式，外部样式集合</li><li>cssStyleSheet 单个样式对象</li><li>cssRules 单个样式对象规则集合</li><li>cssStyleRule 单条样式规则</li></ul><p>内联样式表：使用dom.style访问</p><h2 id="样式计算" tabindex="-1"><a class="header-anchor" href="#样式计算" aria-hidden="true">#</a> 样式计算</h2><p><img src="'+c+'" alt="Alt text"><strong>样式计算过程计算每一个DOM节点的最终样式（Computed Style）。此时的DOM元素都携带了元素的最终样式</strong></p><p>浏览器查看元素的所有属性 <img src="'+p+'" alt="Alt text"> 得到的 DOM 树和 CSSOM 树。通过遍历 DOM 树，为每一个 DOM 节点，计算它的所有 CSS 属性。</p><h3 id="属性计算过程" tabindex="-1"><a class="header-anchor" href="#属性计算过程" aria-hidden="true">#</a> 属性计算过程</h3><ol><li>计算确定声明值，通过<strong>自定义CSS样式</strong>和<strong>浏览器内置的样式表</strong>的声明值相加得到全部的声明值，并且将部分相对值进行转换为绝对值。</li></ol><ul><li>color: red;转换为color: rgb(255, 0, 0);，将font-size: 2em;转换为font-size: 14px;</li></ul><ol start="2"><li>层叠冲突：在确定声明值时，声明的样式规则发生了冲突。此时会进入解决层叠冲突的流程</li></ol><ul><li>比较源的重要性 自定义样式 &gt; 浏览器默认样式</li><li>比较优先级 !important &gt; id &gt; class &gt; 标签 &gt; 继承 &gt; *</li><li>比较次序 同优先级后声明覆盖前声明</li></ul><ol start="3"><li>使用继承 对于每一个 DOM 节点，都会去计算它的所有 CSS 属性。对于未声明的属性，并不是直接使用默认值，而是使用继承值。</li></ol><ul><li>继承原则：就近继承，与权重无关，大部分字体相关的属性都是可继承的，可以在MDN上查找属性是否可继承。</li></ul><ol start="4"><li>使用默认值</li></ol><h2 id="布局-layout" tabindex="-1"><a class="header-anchor" href="#布局-layout" aria-hidden="true">#</a> 布局 layout</h2><p>此过程将DOM树转换为layout树; <img src="'+o+'" alt="Alt text"> 根据 DOM 树里每个节点的样式，计算出每个节点的尺寸和位置。</p><ul><li>百分比，或者auto，在上一步骤无法算出来，在布局这个过程才能算出来。他的尺寸和位置与他的包含块有关</li></ul><h3 id="包含块" tabindex="-1"><a class="header-anchor" href="#包含块" aria-hidden="true">#</a> 包含块</h3><p>包含块影响这些内容的计算：width，height，margin，padding，偏移量(position为absolute或fixed的时候)，以及使用百分比的时候，是依照其包含块数值为基准计算的。</p><h4 id="确定包含块" tabindex="-1"><a class="header-anchor" href="#确定包含块" aria-hidden="true">#</a> 确定包含块</h4><ul><li>static、relative、sticky：包含块可能由它的最近的祖先块元素的内容区的边缘组成；</li><li>absolute：由它的最近的 position 的值不是 static 的祖先元素的内边距区的边缘组成；</li><li>fixed：在连续媒体的情况下包含块是viewport；</li><li>absolute或fixed：包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的。 <ol><li>transform或 perspective 的值不是 none。</li><li>will-change的值是 transform 或 perspective。</li><li>backdrop-filter的值不是 none（例如：backdrop-filter: blur(10px);）。</li></ol></li></ul><h3 id="dom树与layout树不是一一对应的" tabindex="-1"><a class="header-anchor" href="#dom树与layout树不是一一对应的" aria-hidden="true">#</a> DOM树与layout树不是一一对应的</h3><p><img src="'+u+'" alt="Alt text"> 布局树是记录节点的几何信息(尺寸和位置)的，如果设置了display: none;，则节点失去几何信息，不会被添加到布局树中。 <img src="'+g+'" alt="Alt text"> 伪元素节点不存在于DOM树中，但是有几何信息，因此会被生成到布局树中。 <img src="'+m+'" alt="Alt text"> 布局过程存在两个规则(w3c规定)：如果在块盒中直接写入内容，则会在中间生成一个匿名行盒；如果块盒和行盒相邻，则为行盒外部生成一个匿名块盒。（参考上图）</p><ul><li>内容必须在行盒中</li><li>行盒和块盒不能相邻</li></ul><h3 id="浏览器默认样式" tabindex="-1"><a class="header-anchor" href="#浏览器默认样式" aria-hidden="true">#</a> 浏览器默认样式</h3><p>html标签只表明语义，不区分行盒或块盒，css决定元素是行盒还是块盒。 通常理解的p, div是块盒，是因为浏览器默认样式给它们设置了display: block;。 head，meta等标签都是隐藏的，是因为浏览器默认样式表给它们设置了display: none;。 可以在github上chromium的源代码中找到这些默认样式。</p><p><img src="'+f+'" alt="Alt text"></p><p>上述的DOM树和布局树都是指浏览器底层的C++对象，它们以不同程度暴露到JS中。 对于DOM树，JS提供了document对象可以访问；而布局树，只暴露出了很少的内容，例如：clientWidth，offsetWidth等属性。</p><h2 id="分层-layer" tabindex="-1"><a class="header-anchor" href="#分层-layer" aria-hidden="true">#</a> 分层 layer</h2><p>现在的页面大多都十分复杂，并且交互效果很多。如果不分层，用户的一个简单交互将导致整个页面的重新渲染，效率低下。 分层的好处在于可以局部的渲染，提高性能。 <img src="'+b+'" alt="Alt text"> chrome 查看页面分层情况</p><p>通常来说不会太多层，因为分层虽然可以提高渲染效率，但是占用很大内存空间。 分层与部分CSS属性有关，通常页面越复杂则层越多，但是也不一定，因为不同浏览器的分层策略可能不同。 总结：与堆叠上下文有关的属性，会影响分层的决策，最后依据不同浏览器的具体实现，生成分层的结果。</p><ul><li>与堆叠上下文有关的属性：z-index，opacity，transform......</li></ul><h3 id="will-change" tabindex="-1"><a class="header-anchor" href="#will-change" aria-hidden="true">#</a> will-change</h3><p>通常大多数元素例如div不会单独分为一层，但是如果它的内容经常需要更新、需要重新渲染，可以添加一个属性：will-change。 如果这个元素的transform属性需要经常发生变化，那么可以声明will-change: transform;，告知浏览器其需要经常更新，但是最后是否决定分层依然是浏览器的具体实现决定的。</p><h2 id="绘制-paint" tabindex="-1"><a class="header-anchor" href="#绘制-paint" aria-hidden="true">#</a> 绘制 paint</h2><p>需要生成绘制的指令，为每个层生成绘制指令集，用于描述这一层的内容该如何画出来。</p><ul><li>canvas是浏览器将绘制过程封装后提供给开发者的工具。 <img src="'+x+'" alt="Alt text"><strong>至此渲染主线程的工作完毕</strong></li></ul><h2 id="分块-tiling" tabindex="-1"><a class="header-anchor" href="#分块-tiling" aria-hidden="true">#</a> 分块 Tiling</h2><p>分块将每一层分为多个小的区域。 <img src="'+v+'" alt="Alt text"> 这一步的目的是，优先画出视口内以及接近视口的内容。可以将其视为更底层的“懒加载”。 <img src="'+y+'" alt="Alt text"> 渲染主线程先将分块任务交给合成线程，合成线程会从线程池中拿取多个线程来完成分块工作。 其中的合成线程和渲染主线程都位于渲染进程里。</p><h2 id="光栅化-raster" tabindex="-1"><a class="header-anchor" href="#光栅化-raster" aria-hidden="true">#</a> 光栅化 raster</h2><p><img src="'+M+'" alt="Alt text"> 光栅化将每个块变成位图，既然上一步已经分块了，这一步自然是优先处理接近视口的块。 位图：可以简单理解成用二维数组存储的像素信息。 像素信息：例如(red, green, blue, alpha)。 合成线程会将块信息交给GPU进程完成光栅化，而GPU进程内部又会开启多个线程完成光栅化，优先处理靠近视口区域的块</p><h2 id="画-draw" tabindex="-1"><a class="header-anchor" href="#画-draw" aria-hidden="true">#</a> 画 draw</h2><p><img src="'+S+'" alt="Alt text"> 合成线程计算出每个位图在屏幕上的位置，交给GPU进行最终呈现。 其中的quad称为“指引信息”，指明位图信息位于屏幕上的哪一个像素点。</p><ul><li>CSS中的transform是在这一步确定的，只需要对位图进行矩阵变换。这也是transform效率高的主要原因，因为它与渲染主线程无关，这个过程发生在合成线程中。</li></ul><h3 id="为什么合成线程不直接将结果交给硬件-而要先转交给浏览器gpu" tabindex="-1"><a class="header-anchor" href="#为什么合成线程不直接将结果交给硬件-而要先转交给浏览器gpu" aria-hidden="true">#</a> 为什么合成线程不直接将结果交给硬件，而要先转交给浏览器GPU？</h3><p>合成线程和渲染主线程都是隶属于渲染进程的，渲染进程处于沙盒中，无法进行系统调度，即无法直接与硬件GPU通信。 沙盒是一种浏览器安全策略，使得渲染进程无法直接与操作系统、硬件通信，可以避免一些网络病毒的攻击。 综上，合成线程将计算结果先转交给浏览器的GPU进程，再由其发送给硬件GPU，最终将内容显示到屏幕上。</p><h3 id="什么是-reflow" tabindex="-1"><a class="header-anchor" href="#什么是-reflow" aria-hidden="true">#</a> 什么是 reflow？</h3><p>reflow 的本质就是重新计算 layout 树。 当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。 为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。 也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p><h3 id="什么是-repaint" tabindex="-1"><a class="header-anchor" href="#什么是-repaint" aria-hidden="true">#</a> 什么是 repaint？</h3><p>repaint 的本质就是重新根据分层信息计算了绘制指令。 当改动了可见样式后，就需要重新计算，会引发 repaint。 由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p><h3 id="为什么-transform-的效率高" tabindex="-1"><a class="header-anchor" href="#为什么-transform-的效率高" aria-hidden="true">#</a> 为什么 transform 的效率高？</h3><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段 由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>',74),O={},k=(0,l(3744).Z)(O,[["render",function(e,a){return w}]])},3744:(e,a)=>{a.Z=(e,a)=>{const l=e.__vccOpts||e;for(const[e,t]of a)l[e]=t;return l}}}]);