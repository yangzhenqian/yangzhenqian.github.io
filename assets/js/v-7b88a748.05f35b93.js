"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[201],{9465:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7b88a748",path:"/threejs/three.html",title:"threejs",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"WebGL是什么？",slug:"webgl是什么",children:[]},{level:2,title:"threejs是什么？",slug:"threejs是什么",children:[]},{level:2,title:"本地运行threejs官网项目",slug:"本地运行threejs官网项目",children:[]},{level:2,title:"三维模型基础组成",slug:"三维模型基础组成",children:[{level:3,title:"第一个场景",slug:"第一个场景",children:[]},{level:3,title:"场景 Scene",slug:"场景-scene",children:[]},{level:3,title:"相机 Camera",slug:"相机-camera",children:[]},{level:3,title:"渲染器 webglRenderer",slug:"渲染器-webglrenderer",children:[]},{level:3,title:"几何体 bufferGeometry",slug:"几何体-buffergeometry",children:[]},{level:3,title:"材质 Material",slug:"材质-material",children:[]},{level:3,title:"光源 light",slug:"光源-light",children:[]},{level:3,title:"加载器",slug:"加载器",children:[]},{level:3,title:"动画",slug:"动画",children:[]},{level:3,title:"字体",slug:"字体",children:[]},{level:3,title:"着色器",slug:"着色器",children:[]},{level:3,title:"status 状态检测器",slug:"status-状态检测器",children:[]},{level:3,title:"guis 外部操作按钮",slug:"guis-外部操作按钮",children:[]}]}],filePathRelative:"threejs/three.md",git:{updatedTime:1695711786e3,contributors:[{name:"yangzhenqian",email:"zhenqian.yang@i-tage.com",commits:4},{name:"yzq",email:"1391795844@qq.com",commits:2}]}}},6168:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(6252);const e=a.p+"assets/img/camera.a5ebd1a4.jpg",t=a.p+"assets/img/controls_change.7f6e2263.png",o=a.p+"assets/img/mateial_extends.25ee7dea.png",c=(0,p.uE)('<h1 id="threejs" tabindex="-1"><a class="header-anchor" href="#threejs" aria-hidden="true">#</a> threejs</h1><h2 id="webgl是什么" tabindex="-1"><a class="header-anchor" href="#webgl是什么" aria-hidden="true">#</a> WebGL是什么？</h2><p>WebGL是一种三维绘图标准，该绘图标准允许把js和openGl结合在一起，这样Web开发人员就可以借助硬件在浏览器中更流畅的展示三维模型和模型， 以创建复杂的导航和数据视觉化；</p><h2 id="threejs是什么" tabindex="-1"><a class="header-anchor" href="#threejs是什么" aria-hidden="true">#</a> threejs是什么？</h2><p>threejs是一款基于原生WebGL的三维引擎框架（库）, 该框架在WebGL的API基础上以简单，直观的方式封装了三维图形的常用对象，因此大大减少了程序员在Web前端开发三维图形应用的工作量，threejs还使用了很多图形引擎的高级技巧，极大的提高了应用性能；</p><h2 id="本地运行threejs官网项目" tabindex="-1"><a class="header-anchor" href="#本地运行threejs官网项目" aria-hidden="true">#</a> 本地运行threejs官网项目</h2><p>本地运行可访问官网实例 &amp; 文档，避免每次查询问题需访问官网，官网处于外网，访问过慢的问题</p><ul><li>github地址 https://github.com/mrdoob/three.js</li><li>git克隆仓库地址 https://github.com/mrdoob/three.js.git</li><li>文件目录 <ul><li>examples 官网实例文件</li><li>docs 官网文档文件 下载项目</li></ul></li><li>下载npm包 http-server 作用：在某文件下面生成可访问的链接（默认端口8080）；</li><li>运行 <ul><li>进入某文件夹下运行http-server，输入127.0.0.1:8080/访问文件夹下内容</li></ul></li></ul><h2 id="三维模型基础组成" tabindex="-1"><a class="header-anchor" href="#三维模型基础组成" aria-hidden="true">#</a> 三维模型基础组成</h2><h3 id="第一个场景" tabindex="-1"><a class="header-anchor" href="#第一个场景" aria-hidden="true">#</a> 第一个场景</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建第一个场景</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">THREE</span> <span class="token keyword">from</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建场景</span>\n<span class="token keyword">let</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置场景背景颜色</span>\nscene<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token string">&#39;#1C1C28&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建透视相机</span>\n<span class="token keyword">let</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span> <span class="token number">75</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//视角范围，相机长宽比 ，最近距离， 最远距离</span>\ncamera<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置相机位置</span>\ncamera<span class="token punctuation">.</span><span class="token function">lookAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置相机看向位置</span>\n<span class="token comment">// 创建render渲染器</span>\n<span class="token keyword">let</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将渲染器插入指定的div盒子中</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="场景-scene" tabindex="-1"><a class="header-anchor" href="#场景-scene" aria-hidden="true">#</a> 场景 Scene</h3><p>场景作为three集合体，所有需要显示的几何体都需要添加到场景中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建场景</span>\n<span class="token keyword">let</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置场景背景颜色</span>\nscene<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token string">&#39;#1C1C28&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 线性雾 fog  雾的密度是随着距离线性增大的</span>\nscene<span class="token punctuation">.</span>fog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Fog</span><span class="token punctuation">(</span><span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (雾化颜色， 雾化影响起始距离， 雾化影响最远距离)</span>\n<span class="token comment">// 指数雾 FogExp2  可以在相机附近提供清晰的视野，且距离相机越远，雾的浓度随着指数增长越快</span>\nscene<span class="token punctuation">.</span>fog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>FogExp2</span><span class="token punctuation">(</span><span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span> <span class="token number">0.025</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (雾化颜色， 雾化指数：默认0.025)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p>常用属性</p><ul><li>children 用于储存场景中所有几何体</li><li>fog 雾化</li><li>background 背景色</li><li>environment: Texture 若该值不为null，则该纹理贴图将会被设为场景中所有物理材质的环境贴图，不会覆盖已单独赋值的提如图</li><li>overrideMaterial: Material 若不为空，则强制场景中所有几何体材质设置为该值</li></ul></li><li><p>常用方法</p><ul><li>add() 增加几何体</li><li>remove() 删除几何体</li><li>getObjectByName() 获取指定名称的几何体</li><li>tranverse() 传入一个函数，遍历所有几何体对象</li></ul></li></ul><h3 id="相机-camera" tabindex="-1"><a class="header-anchor" href="#相机-camera" aria-hidden="true">#</a> 相机 Camera</h3><h4 id="正交相机-orthographiccamera" tabindex="-1"><a class="header-anchor" href="#正交相机-orthographiccamera" aria-hidden="true">#</a> 正交相机 （OrthographicCamera）</h4><p>无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//(左侧面，右侧面， 上侧面， 下侧面， 近端， 远端)</span>\n<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>OrthographicCamera</span><span class="token punctuation">(</span> width <span class="token operator">/</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> camera <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="透视相机-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#透视相机-perspectivecamera" aria-hidden="true">#</a> 透视相机 （PerspectiveCamera）</h4><p>这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。距离越远物体越小。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//(视角，视锥体长宽比，近端， 远端)</span>\n<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span> <span class="token number">45</span><span class="token punctuation">,</span> width <span class="token operator">/</span> height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> camera <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="'+e+'" alt=""></p><h4 id="相机控件" tabindex="-1"><a class="header-anchor" href="#相机控件" aria-hidden="true">#</a> 相机控件</h4><h4 id="orbitcontrols-轨道控制器" tabindex="-1"><a class="header-anchor" href="#orbitcontrols-轨道控制器" aria-hidden="true">#</a> OrbitControls 轨道控制器</h4><p>可以使相机围绕目标进行运动，主要包括旋转，平移，缩放等操作</p><p>需单独引入 OrbitControl.js 文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight <span class="token punctuation">)</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span> <span class="token number">45</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span> camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(相机， 目标)</span>\n\ncontrols<span class="token punctuation">.</span>maxPolarAngle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">12</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>minPolarAngle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>maxAzimuthAngle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>minAzimuthAngle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>maxDistance <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>minDistance <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>panSpeed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span>mouseButtons <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">LEFT</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">MOUSE</span><span class="token punctuation">.</span><span class="token constant">PAN</span><span class="token punctuation">,</span>\n  <span class="token constant">MIDDLE</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">MOUSE</span><span class="token punctuation">.</span><span class="token constant">DOLLY</span><span class="token punctuation">,</span>\n  <span class="token constant">RIGHT</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">MOUSE</span><span class="token punctuation">.</span><span class="token constant">ROTATE</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\ncontrols<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>bool<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="常用属性" tabindex="-1"><a class="header-anchor" href="#常用属性" aria-hidden="true">#</a> 常用属性</h4><ul><li><p>autoRotate：自动围绕目标旋转，默认false</p></li><li><p>autoRotateSpeed：自动旋转速度</p></li><li><p>enabled：当设置为false时，控制器将不会响应用户的操作。</p></li><li><p>enablePan: 启用/禁用 相机平移 默认true启用</p></li><li><p>enableRotate: 启用/禁用 相机旋转 默认true启用</p></li><li><p>enableZoom: 启用/禁用 相机缩放 默认true启用</p></li><li><p>maxAzimuthAngle：水平旋转的角度上限。其有效值范围为[-2 * Math.PI，2 * Math.PI]，且旋转角度的上限和下限差值小于2 * Math.PI。默认值为无穷大。</p></li><li><p>maxDistance： 你能够将相机向外移动多少（仅适用于PerspectiveCamera），其默认值为Infinity。</p></li><li><p>maxPolarAngle: 垂直旋转的角度的上限，范围是0到Math.PI，其默认值为Math.PI。</p></li><li><p>maxZoom : Float - 将相机缩小多少（仅适用于OrthographicCamera），其默认值为Infinity。</p></li><li><p>minAzimuthAngle : Float - 水平旋转的角度下限。其有效值范围为[-2 * Math.PI，2 * Math.PI]，且旋转角度的上限和下限差值小于2 * Math.PI。默认值为无穷大。</p></li><li><p>minDistance : Float 将相机向内移动多少（仅适用于PerspectiveCamera），其默认值为0。</p></li><li><p>minPolarAngle : Float 垂直旋转的角度的下限，范围是0到Math.PI，其默认值为0。</p></li><li><p>minZoom : Float - 相机放大多少（仅适用于OrthographicCamera），其默认值为0。</p></li><li><p>mouseButtons : Object - 该对象包含由控件所使用的鼠标操作的引用。</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>controls<span class="token punctuation">.</span>mouseButtons <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token constant">LEFT</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">MOUSE</span><span class="token punctuation">.</span><span class="token constant">ROTATE</span><span class="token punctuation">,</span>\n\t<span class="token constant">MIDDLE</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">MOUSE</span><span class="token punctuation">.</span><span class="token constant">DOLLY</span><span class="token punctuation">,</span>\n\t<span class="token constant">RIGHT</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">MOUSE</span><span class="token punctuation">.</span><span class="token constant">PAN</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>object : Camera - 正被控制的摄像机。</li><li>panSpeed : Float - 位移的速度，其默认值为1。</li><li>target : Vector3 - 相机围绕的中心点</li><li>touches : Object - 该对象包含由控件所使用的触摸操作的引用。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>controls<span class="token punctuation">.</span>touches <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token constant">ONE</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">TOUCH</span><span class="token punctuation">.</span><span class="token constant">ROTATE</span><span class="token punctuation">,</span>\n\t<span class="token constant">TWO</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span><span class="token constant">TOUCH</span><span class="token punctuation">.</span><span class="token constant">DOLLY_PAN</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>zoomSpeed : Float - 摄像机缩放的速度，其默认值为1。</li></ul><h4 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h4><ul><li>dispose () - 移除所有事件监听</li><li>saveState () - 保存当前控制器状态，通过reset恢复</li><li>reset() - 恢复之前存储的状态</li><li>update() - 更新控制器。必须在摄像机的变换发生任何手动改变后调用， 或如果.autoRotate或.enableDamping被设置时，在update循环里调用。</li></ul><h4 id="监听事件" tabindex="-1"><a class="header-anchor" href="#监听事件" aria-hidden="true">#</a> 监听事件</h4><p>change（）相机控件发生改变触发事件</p><p>源码未返回任何参数，可将文件拉出重写添加参数 <img src="'+t+'" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>controls<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>bool<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="渲染器-webglrenderer" tabindex="-1"><a class="header-anchor" href="#渲染器-webglrenderer" aria-hidden="true">#</a> 渲染器 webglRenderer</h3><p>将场景用webgl渲染出来</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token comment">// 创建render渲染器</span>\n<span class="token keyword">let</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将渲染器插入指定的div盒子中</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>常用属性</p><ul><li>context 将渲染器加入已有的渲染环境中</li><li>antialias 抗锯齿 默认false， 开启抗锯齿放大后更平滑</li></ul></li><li><p>常用方法</p><ul><li>setSize() 更改canvas大小</li><li>getContext() 获取当前环境</li></ul></li></ul><h4 id="css2drenderer" tabindex="-1"><a class="header-anchor" href="#css2drenderer" aria-hidden="true">#</a> CSS2DRenderer</h4><p>是CSS3D简化版，仅支持平移，主要用于将html元素跟三维元素进行绑定显示，各个DOM元素也被包含到一个CSS2DObject实例中，并被添加到场景图中。</p><h4 id="css3drenderer" tabindex="-1"><a class="header-anchor" href="#css3drenderer" aria-hidden="true">#</a> CSS3DRenderer</h4><p>将3d变换通过dom方式显示出来，不支持材质，几何体等属性，也可以用作DOM跟三维模型结合显示；</p><h3 id="几何体-buffergeometry" tabindex="-1"><a class="header-anchor" href="#几何体-buffergeometry" aria-hidden="true">#</a> 几何体 bufferGeometry</h3><p>用于描述点，线，面的基础对象，包含顶点坐标，顶点向量，颜色，uv值等;</p><p>r125版本之前支持两种基础创建方式 geometry &amp;&amp; bufferGeometry, r125版本之后不再支持 geometry；</p><p>bufferGeometry对于geometry，渲染时少一层转化，所以相对于性能好，geometry写法相对于简单一点；</p><p>bufferGeometry相对于性能好，geometry相对于开发者较好</p><h4 id="buffergeometry-缓存几何体" tabindex="-1"><a class="header-anchor" href="#buffergeometry-缓存几何体" aria-hidden="true">#</a> bufferGeometry 缓存几何体</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> pointsArray <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BufferGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 第一种</span>\n    <span class="token keyword">let</span> lineGeometry1 <span class="token operator">=</span> geometry<span class="token punctuation">.</span><span class="token function">setFromPoints</span><span class="token punctuation">(</span>pointsArray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 第二种</span>\n    <span class="token keyword">let</span> pointArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 通过属性直接设置顶点坐标</span>\n    <span class="token keyword">let</span> lineGeometry2 <span class="token operator">=</span> geometry<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> <span class="token string">&#39;position&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BufferAttribute</span><span class="token punctuation">(</span> pointsArray<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (坐标点数组，几个值为一个点)</span>\n    <span class="token comment">//设置名称</span>\n    lineGeometry2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="使用原生buffergeometry生成的几何体需要贴图时-需要手动设置uv值" tabindex="-1"><a class="header-anchor" href="#使用原生buffergeometry生成的几何体需要贴图时-需要手动设置uv值" aria-hidden="true">#</a> 使用原生bufferGeometry生成的几何体需要贴图时，需要手动设置uv值</h5><p>BufferAttribute 这个类是用于储存bufferGeometry相关的attribute（坐标，颜色，uv等），利用BufferAttribute可以高效的给cpu传递数据</p><ul><li><p>常用属性</p><ul><li>attributes 同js一样，用于存储当前几何体的属性</li><li>groups 将几何体分为组渲染，可以给每个单独组设置不同的属性</li><li>name 当前几何体名称，后续可以通过getObjectByName获取到改对象</li></ul></li><li><p>常用方法</p><ul><li>setAttribute(name, attributes) 设置attributes属性</li><li>getAttribute(name) 获取attributes属性</li><li>deleteAttribute(name) 删除指定属性 4</li><li>addGroup(group) 添加一个group组</li><li>clone() 克隆当前几何体</li><li>copy(bufferGeometry) 复制其他几何体属性</li><li>dispose() 从内存中销毁对象</li><li>scale(x,y,z) 缩放</li><li>setFromPoints(pointArray) 通过点队列设置几何体顶点</li><li>translate(x,y,z) 平移</li><li>rotateX(float) X轴旋转</li><li>lookAt(x,y,z) 几何体朝向的世界坐标</li></ul></li><li><p>threejs内部提供封装好的几何体，所有的封装几何体都继承于bufferGeometry类</p><ul><li>BoxGeometry(长，宽， 高， 长分段数， 宽分段数， 高分段数) 正方形几何体，默认为1</li><li>CircleGeometry(半径，分段数值越高越圆，起始角度，需绘制角度) 圆形几何体</li><li>SphereGeometry(半径，经线分段数，纬线分段数，经线起始角度，经线绘制角度，纬线起始角度，纬线绘制角度) 球形几何体</li><li>PlaneGeometry(长，宽， 长分段数， 宽分段数) 平面几何体</li><li>CylinderGeometry(顶部半径，底部半径，高度，侧面分段数，高度分段数，是否封顶，起始角度，绘制角度) 圆柱几何体</li><li>EdgesGeometry(几何体，超过该角度才绘制) 边缘几何体，用于绘制几何体边线</li><li>textGeometry() 文本几何体</li></ul></li></ul><h4 id="geometry-普通几何体" tabindex="-1"><a class="header-anchor" href="#geometry-普通几何体" aria-hidden="true">#</a> Geometry 普通几何体</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    geometry<span class="token punctuation">.</span>vertices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    geometry<span class="token punctuation">.</span>vertices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="材质-material" tabindex="-1"><a class="header-anchor" href="#材质-material" aria-hidden="true">#</a> 材质 Material</h3><h4 id="基类-material" tabindex="-1"><a class="header-anchor" href="#基类-material" aria-hidden="true">#</a> 基类 Material</h4><p>所有其他材质都是继承于该类</p><p><img src="'+o+'" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 生成基础平面材质，该材质不会对光源产生反应</span>\n  <span class="token keyword">let</span> mateRial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pointGreen<span class="token punctuation">,</span> <span class="token comment">// 纹理贴图，图片 || canvas</span>\n    <span class="token literal-property property">transparent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 可以设置opacity来控制透明度，该值为false，opac ity失效</span>\n    <span class="token literal-property property">depthTest</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否在渲染此材质时启用深度测试， 默认为true</span>\n    <span class="token literal-property property">depthWrite</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 渲染此材质是否对深度缓冲区有任何影响, 默认true</span>\n    <span class="token literal-property property">side</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>DoubleSide<span class="token punctuation">,</span> <span class="token comment">// 渲染那面</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="uv-名词解释" tabindex="-1"><a class="header-anchor" href="#uv-名词解释" aria-hidden="true">#</a> uv 名词解释</h4><p>UV映射是一种将纹理坐标映射到几何体表面的技术。UV坐标定义了纹理在几何体表面上的位置和方向，使得纹理可以正确地贴在几何体上，从而实现贴图效果；</p><p>可以通过设置Geometry对象的faceVertexUvs属性来为每个面指定UV坐标，或者通过设置BufferGeometry对象的attributes.uv属性来为每个顶点指定UV坐标。</p><h4 id="常用属性-1" tabindex="-1"><a class="header-anchor" href="#常用属性-1" aria-hidden="true">#</a> 常用属性</h4><ul><li>alphaTest：透明度小于该值不渲染，默认为0</li><li>depthTest： 是否在渲染此材质时启用深度测试，建议多层透明材质叠加显示关闭该属性</li><li>depthWrite：渲染此材质是否对深度缓冲区有任何影响</li><li>isMaterial：检查这个对象是否为材质Material的只读标记</li><li>name：对象的可选名称</li><li>opacity： 材质透明度，只有transparent设置为true是才会显示透明，否则只影响材质颜色，材质完全不透明</li><li>shadowSide：设置投影面</li><li>side：定义渲染那一面，默认正面 <ul><li>THREE.FrontSide： 正面</li><li>THREE.BackSide： 反面</li><li>THREE.DoubleSide： 双面</li></ul></li><li>transparent：是否透明，只有为true，设置opacity才会使材质有透明度</li><li>version：记录材质渲染次数</li><li>vertexColors：是否使用顶点着色。</li><li>visible：是否可见</li><li>userData：可存储自定义数据</li><li>needsUpdate： 需要重新编译材质，默认false</li></ul><h4 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1" aria-hidden="true">#</a> 常用方法</h4><ul><li>clone：返回与此材质具有相同参数的新材质。</li><li>copy：将被传入材质中的参数复制到此材质中。</li></ul><h4 id="内置封装的常用材质类型" tabindex="-1"><a class="header-anchor" href="#内置封装的常用材质类型" aria-hidden="true">#</a> 内置封装的常用材质类型</h4><h5 id="meshbasicmaterial-基础平面材质-该材质不会对光源产生反应" tabindex="-1"><a class="header-anchor" href="#meshbasicmaterial-基础平面材质-该材质不会对光源产生反应" aria-hidden="true">#</a> MeshBasicMaterial 基础平面材质，该材质不会对光源产生反应</h5><ul><li>alphaMap：灰度纹理，用于控制表面的透明度</li><li>color： 颜色</li><li>envMap: 环境贴图，用于显示周边环境，常用于光的折射，反射</li><li>map: 物体表面的材质贴图</li><li>lightMap: 光照贴图，需要第二组uv</li><li>fog：材质是否受雾化影响</li><li>wireframe： 几何体渲染成线框</li><li>wireframeLinecap：定义线两端的图形</li><li>wireframeLinecap： 线连接点样式</li><li>wireframeLinewidth：线框宽度， 大多数webgl的限制，无论该值设置多少，显示始终为1</li></ul><h5 id="meshphongmaterial-具有镜面高光的光泽表面材质" tabindex="-1"><a class="header-anchor" href="#meshphongmaterial-具有镜面高光的光泽表面材质" aria-hidden="true">#</a> MeshPhongMaterial 具有镜面高光的光泽表面材质</h5><p>该材质使用非物理的Blinn-Phong模型来计算反射率。 与MeshLambertMaterial中使用的Lambertian模型不同，该材质可以模拟具有镜面高光的光泽表面（例如涂漆木材）。</p><h4 id="meshlambertmaterial-非光泽表面不具有镜面高光的材质" tabindex="-1"><a class="header-anchor" href="#meshlambertmaterial-非光泽表面不具有镜面高光的材质" aria-hidden="true">#</a> MeshLambertMaterial 非光泽表面不具有镜面高光的材质</h4><p>该材质使用基于非物理的Lambertian模型来计算反射率。 这可以很好地模拟一些表面（例如未经处理的木材或石材），但不能模拟具有镜面高光的光泽表面（例如涂漆木材）。</p><h4 id="pointsmaterial-点材质-points使用的默认材质" tabindex="-1"><a class="header-anchor" href="#pointsmaterial-点材质-points使用的默认材质" aria-hidden="true">#</a> PointsMaterial 点材质，points使用的默认材质</h4><h3 id="光源-light" tabindex="-1"><a class="header-anchor" href="#光源-light" aria-hidden="true">#</a> 光源 light</h3><p>所有内置封装灯光都继承于基类light；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建光源</span>\n<span class="token keyword">let</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Light</span><span class="token punctuation">(</span> <span class="token number">0x404040</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="常用属性-2" tabindex="-1"><a class="header-anchor" href="#常用属性-2" aria-hidden="true">#</a> 常用属性</h4><ul><li>color: 颜色</li><li>intensity： 光照强度，默认1，数值越大，强度越强</li></ul><h4 id="常用方法-2" tabindex="-1"><a class="header-anchor" href="#常用方法-2" aria-hidden="true">#</a> 常用方法</h4><ul><li>copy：复制其他光源</li><li>toJSON：以json的形式返回光数据</li></ul><h4 id="ambientlight-环境光" tabindex="-1"><a class="header-anchor" href="#ambientlight-环境光" aria-hidden="true">#</a> AmbientLight 环境光</h4><p>环境光会均匀的照在场景内所有物体上，不能投射阴影</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AmbientLight</span><span class="token punctuation">(</span> <span class="token number">0x404040</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> light <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="directionallight-平行光" tabindex="-1"><a class="header-anchor" href="#directionallight-平行光" aria-hidden="true">#</a> DirectionalLight 平行光</h4><p>平行光是沿着特定方向发射的光。这种光的表现像是无限远,从它发出的光线都是平行的。常常用平行光来模拟太阳光的效果;</p><p>平行光使用正交相机来计算阴影；</p><h5 id="单独属性" tabindex="-1"><a class="header-anchor" href="#单独属性" aria-hidden="true">#</a> 单独属性</h5><ul><li>castShadow：是否产生阴影，默认false</li><li>shadow：用于平行光计算阴影</li><li>position：光源位置</li><li>target：光照射的目标位置，默认 new THREE.Vector3(0,0,0);</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>DirectionalLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nlight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置光源位置，默认从顶部发光</span>\nlight<span class="token punctuation">.</span>castShadow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 是否产生阴影，默认false</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> light <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 用于平行光计算阴影</span>\nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span> \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span> \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>near <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span> \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>far <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="pointlight-点光源" tabindex="-1"><a class="header-anchor" href="#pointlight-点光源" aria-hidden="true">#</a> PointLight 点光源</h4><p>从一个点向四周发射光线，常用于模拟灯泡</p><h5 id="单独属性-1" tabindex="-1"><a class="header-anchor" href="#单独属性-1" aria-hidden="true">#</a> 单独属性</h5><ul><li>distance： 光照距离</li><li>shadow：用于计算阴影</li><li>position：光源位置</li><li>decay： 光距离衰减量，默认1，2实现现实光衰减</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(color, intensity, distance, decay);</span>\nlight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置光源位置</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> light <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 用于计算阴影</span>\nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span> \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span> \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>near <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>   \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>far <span class="token operator">=</span> <span class="token number">500</span>     \nlight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="spotlight-聚光灯" tabindex="-1"><a class="header-anchor" href="#spotlight-聚光灯" aria-hidden="true">#</a> SpotLight 聚光灯</h4><p>光线从一个点沿一个方向射出，随着光线照射的变远，光线圆锥体的尺寸也逐渐增大。</p><h5 id="单独属性-2" tabindex="-1"><a class="header-anchor" href="#单独属性-2" aria-hidden="true">#</a> 单独属性</h5><ul><li>distance： 光照距离</li><li>shadow：用于计算阴影</li><li>angle：散射角度</li><li>position：光源位置</li><li>decay： 光距离衰减量，默认1，2实现现实光衰减</li><li>color：颜色</li><li>penumbra：聚光锥的半影衰减百分比，0 ~ 1，默认0</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> spotLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SpotLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(color, intensity, distance, angle, penumbra, decay);</span>\nspotLight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 贴图</span>\nspotLight<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 开启阴影</span>\nspotLight<span class="token punctuation">.</span>castShadow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\nspotLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nspotLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\nspotLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>near <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>\nspotLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>far <span class="token operator">=</span> <span class="token number">4000</span><span class="token punctuation">;</span>\nspotLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>fov <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> spotLight <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="rectarealight-平面光光源" tabindex="-1"><a class="header-anchor" href="#rectarealight-平面光光源" aria-hidden="true">#</a> RectAreaLight 平面光光源</h4><p>平面光光源从一个矩形平面上均匀地发射光线。这种光源可以用来模拟像明亮的窗户或者条状灯光光源。</p><p>注意事项：</p><ul><li>不支持阴影。</li><li>只支持 MeshStandardMaterial 和 MeshPhysicalMaterial 两种材质。</li><li>你必须在你的场景中加入 RectAreaLightUniformsLib ，并调用init()。</li></ul><h5 id="单独属性-3" tabindex="-1"><a class="header-anchor" href="#单独属性-3" aria-hidden="true">#</a> 单独属性</h5><ul><li>width: 光源宽度 默认10</li><li>height： 光源高度 默认10</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> intensity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> rectLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>RectAreaLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> intensity<span class="token punctuation">,</span>  width<span class="token punctuation">,</span> height <span class="token punctuation">)</span><span class="token punctuation">;</span>\nrectLight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 光源位置</span>\nrectLight<span class="token punctuation">.</span><span class="token function">lookAt</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 光源朝向</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> rectLight <span class="token punctuation">)</span>\n\nrectLightHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RectAreaLightHelper</span><span class="token punctuation">(</span> rectLight <span class="token punctuation">)</span><span class="token punctuation">;</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> rectLightHelper <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="hemispherelight-半球光" tabindex="-1"><a class="header-anchor" href="#hemispherelight-半球光" aria-hidden="true">#</a> HemisphereLight 半球光</h4><p>平面光光源从一个矩形平面上均匀地发射光线。这种光源可以用来模拟像明亮的窗户或者条状灯光光源。</p><p>注意事项：</p><ul><li>不支持阴影。</li><li>只支持 MeshStandardMaterial 和 MeshPhysicalMaterial 两种材质。</li><li>你必须在你的场景中加入 RectAreaLightUniformsLib ，并调用init()。</li></ul><h5 id="单独属性-4" tabindex="-1"><a class="header-anchor" href="#单独属性-4" aria-hidden="true">#</a> 单独属性</h5><ul><li>color: 颜色</li><li>groundColor： 在构造时传递的地面发出光线的颜色</li><li>skyColor：天空中发出光线的颜色</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>HemisphereLight</span><span class="token punctuation">(</span> skyColor<span class="token punctuation">,</span> groundColor<span class="token punctuation">,</span> intensity <span class="token punctuation">)</span><span class="token punctuation">;</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> light <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="加载器" tabindex="-1"><a class="header-anchor" href="#加载器" aria-hidden="true">#</a> 加载器</h3><h3 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h3><h3 id="字体" tabindex="-1"><a class="header-anchor" href="#字体" aria-hidden="true">#</a> 字体</h3><h3 id="着色器" tabindex="-1"><a class="header-anchor" href="#着色器" aria-hidden="true">#</a> 着色器</h3><h3 id="status-状态检测器" tabindex="-1"><a class="header-anchor" href="#status-状态检测器" aria-hidden="true">#</a> status 状态检测器</h3><h3 id="guis-外部操作按钮" tabindex="-1"><a class="header-anchor" href="#guis-外部操作按钮" aria-hidden="true">#</a> guis 外部操作按钮</h3>',126),l={},i=(0,a(3744).Z)(l,[["render",function(n,s){return c}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);