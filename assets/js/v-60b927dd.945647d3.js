"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[948],{7363:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-60b927dd",path:"/webWorker/webWorker.html",title:"webWorker",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"产生的背景",slug:"产生的背景",children:[]},{level:2,title:"webWorker简介",slug:"webworker简介",children:[]},{level:2,title:"兼容性",slug:"兼容性",children:[]},{level:2,title:"webWorker使用",slug:"webworker使用",children:[{level:3,title:"创建",slug:"创建",children:[]},{level:3,title:"通信",slug:"通信",children:[]},{level:3,title:"监听错误",slug:"监听错误",children:[]},{level:3,title:"关闭",slug:"关闭",children:[]},{level:3,title:"worker引入其他文件",slug:"worker引入其他文件",children:[]},{level:3,title:"ESModule 模式",slug:"esmodule-模式",children:[]},{level:3,title:"有了 Web Worker API，JavaScript 是否真的变成了一门多线程语言？",slug:"有了-web-worker-api-javascript-是否真的变成了一门多线程语言",children:[]}]},{level:2,title:"SharedWorker",slug:"sharedworker",children:[{level:3,title:"sharedWorker调试",slug:"sharedworker调试",children:[]},{level:3,title:"兼容性",slug:"兼容性-1",children:[]}]},{level:2,title:"serviceWorker",slug:"serviceworker",children:[]}],filePathRelative:"webWorker/webWorker.md",git:{updatedTime:1702025006e3,contributors:[{name:"yangzhenqian",email:"zhenqian.yang@i-tage.com",commits:3}]}}},8402:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var e=a(6252);const p=a.p+"assets/img/image.efe10bc4.png",t=a.p+"assets/img/image-1.a7f8d36d.png",o=a.p+"assets/img/image-2.f1c5a53a.png",r=(0,e.uE)('<h1 id="webworker" tabindex="-1"><a class="header-anchor" href="#webworker" aria-hidden="true">#</a> webWorker</h1><h2 id="产生的背景" tabindex="-1"><a class="header-anchor" href="#产生的背景" aria-hidden="true">#</a> 产生的背景</h2><p>随着Web技术的不断演进，JavaScript的单线程模型已经无法满足日益复杂的业务需求和以及带来的性能要求。为了解决这些问题，JavaScript引入了一些如ajax、setTimeout、requestAnimationFrame等机制，但需要明确的是，这些机制不过是通过EventLoop来制造的多线程假象，其并没有改变JavaScript单线程的本质。 至今，现代Web应用中用户交互变得越来越复杂，以及数据处理需求的增加，JavaScript应用需要更强的计算能力和更快的响应性，单线程模型面临着着挑战愈发严重。这就引出了一个关键问题：如何在保持JavaScript的单线程特性的同时，充分利用多核处理器来提高性能以满足用户的需求？在这样的背景下，Web Worker技术应运而生。</p><h2 id="webworker简介" tabindex="-1"><a class="header-anchor" href="#webworker简介" aria-hidden="true">#</a> webWorker简介</h2><p>Web Workers 是一种在浏览器中运行的 JavaScript 脚本，可以在后台线程中执行，独立于主线程。它们提供了一种并行处理任务的方式，可以提高网页的性能和响应性。 Web Workers 可以执行耗时的计算、处理大量数据、执行复杂的算法等任务，而不会阻塞主线程，从而保持页面的流畅性。</p><ul><li>Worker 线程是在浏览器环境中被唤起，但是它与当前页面窗口运行在不同的全局上下文中；</li><li>顶层对象 window，以及 parent 对象在 Worker 线程上下文中是不可用的；</li><li>Worker 线程上下文中，操作 DOM 的行为也是不可行的，document对象也不存在；</li><li>location和navigator对象可以以可读方式访问；</li><li>绝大多数 Window 对象上的方法和属性，都被共享到 Worker 上下文全局对象 WorkerGlobalScope 中；</li><li>Worker 线程上下文也存在一个顶级对象 self；</li><li>与主线程通信需借助postmessage</li></ul><h2 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h2><p><img src="'+p+'" alt=""></p><h2 id="webworker使用" tabindex="-1"><a class="header-anchor" href="#webworker使用" aria-hidden="true">#</a> webWorker使用</h2><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><p>options配置</p><ul><li>name 可选，主要用于调试</li><li>type 可选 <ol><li>classic 默认</li><li>module 如果加载为ESModule类型文件，则设置该值</li></ol></li><li>credentials 可选 <ol><li>默认omit不需要携带凭证，</li><li>&quot;same-origin&quot;:仅在请求与当前页面具有相同的源（origin）时发送凭据信息。</li><li>&quot;include&quot; : 总是发送凭据信息，即使跨域请求。</li></ol></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;./work.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;work&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;classic || module&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&#39;omit&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="通信" tabindex="-1"><a class="header-anchor" href="#通信" aria-hidden="true">#</a> 通信</h3><p>主线程与worker线程相互独立，通信需要借助postmessage</p><ul><li>参数不可以是callback回调函数</li><li>无法共享内存： 与传统多线程编程不同，Web Worker不能直接共享内存，主页面与worker之间的数据传递的是通过拷贝而不是共享来完成的。因此在如大文件传输场景下可能会消耗大量内存和处理时间。</li><li>数据序列化问题： 当主线程与Web Worker之间在数据交换时需要对数据进行序列化和反序列化，序列化会阻塞发送方，而反序列化会阻塞接收方。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 主线程</span>\n<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 发</span>\nmyWorker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//收</span>\nmyWorker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//worker线程</span>\n<span class="token comment">// 发</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 收</span>\nself<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="监听错误" tabindex="-1"><a class="header-anchor" href="#监听错误" aria-hidden="true">#</a> 监听错误</h3><ul><li>error 监听worker内部错误</li><li>messageError 监听传输数据无法被解析的时候抛出</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 主线程</span>\n<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建worker</span>\nmyWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;messageerror&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// worker线程</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;messageerror&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="关闭" tabindex="-1"><a class="header-anchor" href="#关闭" aria-hidden="true">#</a> 关闭</h3><p>worker 线程的关闭在主线程和 worker 线程都能进行操作，但对 worker 线程的影响略有不同。</p><ul><li>关闭两种方式 <ol><li>myWorker.terminate() 主线程主动关闭</li><li>self.close() worker线程主动关闭</li></ol></li><li>两者相同点 <ol><li>worker 线程当前的 Event Loop 中的任务会继续执行</li><li>下一个EventLoop任务不再理会</li></ol></li><li>不同点 <ol><li>主线程主动关闭，之间的链接会立即关闭，及时当前EventLoop中存在未执行的postMessage消息，主进程也不会收到改消息</li><li>worker进程关闭，不会立即断开链接，会等到当前EventLoop任务执行完成再断开链接，当前EventLoop 同步任务，微任务中存在PostMessage，主进程依然会收到消息</li></ol></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 主线程</span>\n<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建worker</span>\nmyWorker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭worker</span>\n<span class="token comment">// worker线程</span>\nself<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="worker引入其他文件" tabindex="-1"><a class="header-anchor" href="#worker引入其他文件" aria-hidden="true">#</a> worker引入其他文件</h3><p>如果逻辑繁琐，代码体量较大，都写在一个文件，会造成阅读成本较大，代码逻辑混乱等问题，因此就需要引入其他文件，将其他文件的代码引入到worker中，实现逻辑的复用 worker线程中使用importScripts来引入其他js文件，通过该方法引入的文件不受同源策略的限制</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token comment">// worker.js（worker线程）</span>\n<span class="token comment">// 使用方法：importScripts(path1, path2, ...); </span>\n<span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// log 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="esmodule-模式" tabindex="-1"><a class="header-anchor" href="#esmodule-模式" aria-hidden="true">#</a> ESModule 模式</h3><p>当js文件为ESModule写法时，使用importScripts()直接引入会报错，此时就需要初始化时将第二个参数设置为module</p><p>原生js引入ESModule类型文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;./worker.js&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 主线程</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span>  <span class="token comment">// 指定 worker.js 的类型</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// utils.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token comment">// worker线程</span>\n<span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入外部js</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> \n    <span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// log 3</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> self<span class="token punctuation">;</span> <span class="token comment">// 只需把顶级对象self暴露出去即可</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="有了-web-worker-api-javascript-是否真的变成了一门多线程语言" tabindex="-1"><a class="header-anchor" href="#有了-web-worker-api-javascript-是否真的变成了一门多线程语言" aria-hidden="true">#</a> 有了 Web Worker API，JavaScript 是否真的变成了一门多线程语言？</h3><p>从底层技术角度来看，Web Worker确实具备多线程的特性。然而这与传统多线程编程语言（如Java或C++）有所不同。如，JavaScript中的主线程与Web Worker之间采用的是消息传递来通信，而不是直接共享内存。这意味着Web Worker之间无法直接共享数据，而传统多线程语言则可以直接共享内存，从而实现更直接和高效的线程间通信。 尽管Web Worker从底层技术上看具备多线程的特性，但如今JavaScript的主要应用领域仍然是处理用户界面和用户交互，Web Worker的引入主要是为了改善前端应用的响应性，使其能够更好地处理一些计算密集型任务，而不是将JavaScript彻底转变为多线程编程语言。 总结而言，尽管Web Worker API为JavaScript提供了一定程度的多线程支持，但JavaScript仍然是一门主要依赖于单线程执行的编程语言，Web Worker并没有改变JavaScript的单线程本质。</p><h2 id="sharedworker" tabindex="-1"><a class="header-anchor" href="#sharedworker" aria-hidden="true">#</a> SharedWorker</h2><p>可被多个页面共享的特殊的worker进程</p><ul><li>注意点 <ol><li>全局作用域 SharedWorkerGlobalScope，但是继承自WorkerGlobalScope</li><li>SharedWorker 线程的创建和使用跟 worker 类似，事件和方法也基本一样</li><li>主线程与 SharedWorker 线程是通过MessagePort建立起链接，数据通讯方法都挂载在SharedWorker.port上</li><li>采用 addEventListener 来接收 message 事件，那么在主线程初始化SharedWorker() 后，还要调用 SharedWorker.port.start() 方法来手动开启端口</li><li>多个通信页面通信必须同源</li></ol></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用addEventListener监听，需要port开启端口</span>\n<span class="token comment">// 主线程</span>\n<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&#39;./sharedWorker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启端口</span>\nmyWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 使用onmessage接收消息</span>\n<span class="token comment">// 主线程</span>\n<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&#39;./sharedWorker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="sharedworker调试" tabindex="-1"><a class="header-anchor" href="#sharedworker调试" aria-hidden="true">#</a> sharedWorker调试</h3><p>在 sharedWorker 线程里使用 console 打印信息，不会出现在主线程的的控制台中。如果你想调试 sharedWorker，需要在 Chrome 浏览器输入 chrome://inspect/ ，这里能看到所有正在运行的 sharedWorker，然后开启一个独立的 dev-tool 面板。 <img src="'+t+'" alt=""></p><h3 id="兼容性-1" tabindex="-1"><a class="header-anchor" href="#兼容性-1" aria-hidden="true">#</a> 兼容性</h3><p>sharedWorker 在 Safari 以及移动端的兼容性不是很好 <img src="'+o+'" alt=""></p><h2 id="serviceworker" tabindex="-1"><a class="header-anchor" href="#serviceworker" aria-hidden="true">#</a> serviceWorker</h2>',43),c={},l=(0,a(3744).Z)(c,[["render",function(n,s){return r}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);