import{d as n}from"./app.c3ff6c08.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u57FA\u7840" tabindex="-1"><a class="header-anchor" href="#\u57FA\u7840" aria-hidden="true">#</a> \u57FA\u7840</h1><h2 id="\u7C7B\u578B\u5224\u65AD" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u5224\u65AD" aria-hidden="true">#</a> \u7C7B\u578B\u5224\u65AD</h2><p>\u5224\u65AD\u6570\u636E\u7C7B\u578B\u6709\u4EE5\u4E0B\u4E09\u79CD\u65B9\u5F0F:</p><ul><li><p>typeof</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>
<span class="token keyword">typeof</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boolean&#39;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;symbol&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u4ECE\u4E0A\u9762\u7684\u8F93\u51FA\u7ED3\u679C\u53EF\u4EE5\u770B\u51FA:</p><ul><li>null \u7684\u5224\u65AD\u6709\u8BEF\u5DEE,\u8F93\u51FA\u4E3A object</li><li>\u64CD\u4F5C\u7B26\u5BF9\u5BF9\u8C61\u7C7B\u578B\u53CA\u5176\u5B50\u7C7B\u578B\uFF0C\u4F8B\u5982\u51FD\u6570\uFF08\u53EF\u8C03\u7528\u5BF9\u8C61\uFF09\u3001\u6570\u7EC4\uFF08\u6709\u5E8F\u7D22\u5F15\u5BF9\u8C61\uFF09\u7B49\u8FDB\u884C\u5224\u5B9A\uFF0C\u5219\u9664\u4E86\u51FD\u6570\u90FD\u4F1A\u5F97\u5230 <code>object</code> \u7684\u7ED3\u679C\u3002</li></ul></li><li><p>instanceof</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>  <span class="token comment">// true</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>arr</code> \u6570\u7EC4\u76F8\u5F53\u4E8E <code>new Array()</code> \u51FA\u7684\u4E00\u4E2A\u5B9E\u4F8B\uFF0C\u6240\u4EE5 <code>arr.__proto__ === Array.prototype</code>\uFF0C\u53C8\u56E0\u4E3A <code>Array</code>\u5C5E\u4E8E <code>Object</code> \u5B50\u7C7B\u578B\uFF0C\u5373<code>Array.prototype.__proto__ === Object.prototype</code>\uFF0C\u56E0\u6B64 <code>Object</code> \u6784\u9020\u51FD\u6570\u5728 <code>arr</code> \u7684\u539F\u578B\u94FE\u4E0A\u3002\u6240\u4EE5 <code>instanceof</code> \u4ECD\u7136\u65E0\u6CD5\u4F18\u96C5\u7684\u5224\u65AD\u4E00\u4E2A\u503C\u5230\u5E95\u5C5E\u4E8E\u6570\u7EC4\u8FD8\u662F\u666E\u901A\u5BF9\u8C61\u3002</p></li><li><p>(\u63A8\u8350) Object.prototype.toString.call()</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object String]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Number]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Boolean]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Null]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object undefined]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Symbol]&quot;</span>

<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Array]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Function]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Function]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Function]&quot;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u4F7F\u7528\u8FD9\u79CD\u65B9\u6CD5\u4EFB\u4F55\u7C7B\u578B\u90FD\u80FD\u51C6\u786E\u5224\u65AD\u51FA\u6765,\u9700\u8981\u7406\u89E3\u4E0B\u9762\u4E09\u70B9:</p><ul><li>\u8BE5\u65B9\u6CD5\u672C\u8D28\u5C31\u662F\u4F9D\u6258<code>Object.prototype.toString()</code>\u65B9\u6CD5\u5F97\u5230\u5BF9\u8C61\u5185\u90E8\u5C5E\u6027 <code>[[Class]]</code></li><li>\u4F20\u5165\u539F\u59CB\u7C7B\u578B\u5374\u80FD\u591F\u5224\u5B9A\u51FA\u7ED3\u679C\u662F\u56E0\u4E3A\u5BF9\u503C\u8FDB\u884C\u4E86\u5305\u88C5</li><li><code>null</code> \u548C <code>undefined</code> \u80FD\u591F\u8F93\u51FA\u7ED3\u679C\u662F\u5185\u90E8\u5B9E\u73B0\u6709\u505A\u5904\u7406</li></ul><p>\u53EF\u4EE5\u5C06\u4E0A\u8FF0\u65B9\u6CD5,\u8FDB\u884C\u4E00\u4E2A\u7B80\u5355\u7684\u5C01\u88C5:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">judgeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dataType <span class="token operator">=</span> <span class="token function">toString</span>
    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[object\\s(.+)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dataType<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;null&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;symbol&#39;</span>

<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;array&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><h2 id="\u4E0E" tabindex="-1"><a class="header-anchor" href="#\u4E0E" aria-hidden="true">#</a> == \u4E0E ===</h2><ol><li>\u5168\u7B49 === : \u4E0D\u4F1A\u7C7B\u578B\u8F6C\u6362,\u5FC5\u987B\u8981\u6570\u636E\u7C7B\u578B\u548C\u503C\u5B8C\u5168\u4E00\u81F4</li></ol><ul><li>\u5BF9\u4E8E<code>\u57FA\u672C\u6570\u636E\u7C7B\u578B</code>,\u4E24\u8FB9\u7684\u503C\u8981\u4E00\u81F4\u624D\u76F8\u7B49,\u6CE8\u610F NaN \u4E0D\u7B49\u4E8E\u4EFB\u4F55\u6570,\u5305\u62EC\u81EA\u5DF1</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>\u5BF9\u4E8E<code>\u590D\u6742\u6570\u636E\u7C7B\u578B</code>,\u4E24\u8FB9\u7684\u5F15\u7528\u5730\u5740\u8981\u4E00\u81F4,\u624D\u76F8\u7B49</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr3 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>

arr1 <span class="token operator">===</span> arr2<span class="token punctuation">;</span> <span class="token comment">// false</span>
arr1 <span class="token operator">===</span> arr3<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>\u76F8\u7B49 == : \u975E\u4E25\u683C\u5339\u914D,\u5728\u4E00\u5B9A\u6761\u4EF6\u4E0B\u4F1A\u8FDB\u884C<code>\u7C7B\u578B\u8F6C\u6362</code> (\u9690\u5F0F\u8F6C\u6362), \u5206\u4EE5\u4E0B 5 \u79CD\u60C5\u51B5</li></ol><ul><li>x \u548C y \u90FD\u662F null \u6216 undefined , \u4E0D\u4F1A\u7C7B\u578B\u8F6C\u6362 , \u65E0\u6761\u4EF6\u8FD4\u56DE true</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>x \u6216 y \u662F NaN , NaN \u4E0D\u7B49\u4E8E\u4EFB\u4F55\u6570\u5B57 , \u4E0D\u4F1A\u7C7B\u578B\u8F6C\u6362 , \u65E0\u6761\u4EF6\u4E3A\u8FD4\u56DE false</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>x \u548C y \u90FD\u662F Number,String ,Boolean</li></ol><p><code>\u5982\u679Cx\u548Cy\u7C7B\u578B\u4E0D\u4E00\u6837,\u4F1A\u8FDB\u884C\u7C7B\u578B\u8F6C\u6362,\u4F1A\u5C06\u4E0D\u662FNumber\u7C7B\u578B\u7684\u8F6C\u6362\u4E3ANumber\u7C7B\u578B</code>;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token comment">// 1 == Number(true)  =&gt;  1 == 1  =&gt; true</span>
<span class="token number">1</span> <span class="token operator">==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">;</span>     <span class="token comment">// 1 == Number(&#39;true&#39;) =&gt; 1 == NaN =&gt; false</span>
<span class="token number">1</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>        <span class="token comment">// 1 == Number(&#39;1&#39;) =&gt; 1 == 1 =&gt; true</span>
<span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// Number(true) == Number(&#39;true&#39;) =&gt; 1 == NaN =&gt; false</span>

\u6CE8\u610F<span class="token operator">:</span> <span class="token function">\u903B\u8F91\u975E</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">)</span> \u7684\u4F18\u5148\u7EA7\u9AD8\u4E8E\u5173\u7CFB\u8FD0\u7B97\u7B26 <span class="token punctuation">,</span> \u4F1A\u5C06\u503C\u5148\u8F6C\u6362\u4E3ABoolean\u7C7B\u578B
<span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">;</span>     <span class="token comment">//  1 == !Boolean(&#39;true&#39;) =&gt; 1 == !true =&gt; 1 == false =&gt; 1 == Number(false) =&gt; 1 == 0 =&gt; false</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">;</span>     <span class="token comment">//  0 == !Boolean(&#39;true&#39;) =&gt; 0 == !true =&gt; 0 == false =&gt; 0 == Number(false) =&gt; 0 == 0 =&gt; true</span>

\u6CE8\u610F<span class="token operator">:</span> Boolean\u7C7B\u578B\u5728<span class="token number">8</span>\u79CD\u5047\u503C\u60C5\u51B5\u4E0B\u4E3A<span class="token boolean">false</span>
<span class="token number">8</span>\u4E2D\u5047\u503C\u5206\u522B\u4E3A<span class="token operator">:</span> <span class="token operator">+</span><span class="token number">0</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token number">0</span> <span class="token keyword">null</span> <span class="token keyword">undefined</span> <span class="token number">NaN</span> <span class="token boolean">false</span> <span class="token string">&#39;&#39;</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="4"><li>x \u548C y \u6709\u4E00\u4E2A\u662F\u5F15\u7528\u6570\u636E\u7C7B\u578B , \u4F1A\u5148\u83B7\u53D6\u5F15\u7528\u6570\u636E\u7C7B\u578B\u7684\u539F\u59CB\u503C</li></ol><p>\u5F15\u7528\u6570\u636E\u7C7B\u578B\u7684\u539F\u59CB\u503C: \u5148\u8C03\u7528 valueOf(),\u63A5\u7740\u8C03\u7528 toString();</p><p>valueOf(): \u4E00\u822C\u9ED8\u8BA4\u8FD4\u56DE\u81EA\u8EAB;</p><p>\u6570\u7EC4\u7684 toSting() : \u9ED8\u8BA4\u4F1A\u8C03\u7528 join() \u65B9\u6CD5\u62FC\u63A5\u6210\u5B57\u7B26\u4E32;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// [].valueOf().toString() == 1 =&gt; [].join() == 1 =&gt; &#39;&#39; == 1 =&gt; Number(&#39;&#39;) == 1 =&gt; 0 ==1 =&gt; false</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// {}.valueOf() == 1 =&gt; {}.toString() == 1 =&gt; &#39;[obejct Object]&#39; == 1 =&gt; Number(&#39;[obejct Object]&#39;) == 1 =&gt; NaN == 1 =&gt; false</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1,2,3&#39;</span> <span class="token comment">// [1,2,3].toString() == &#39;1,2,3&#39; =&gt; [1,2,3].join() == &#39;1,2,3&#39; =&gt; &#39;1,2,3&#39; == &#39;1,2,3&#39; =&gt; true</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// {}.toString() == &#39;[object Object]&#39;  =&gt; &#39;[object Object]&#39; == &#39;[object Object]&#39; =&gt; true</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="5"><li>x \u548C y \u90FD\u4E3A\u5F15\u7528\u7C7B\u578B <code>\u53EA\u6BD4\u8F83\u5F15\u7528\u5730\u5740,\u5730\u5740\u4E00\u81F4,\u5219\u4E3Atrue</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr3 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>
arr1 <span class="token operator">==</span> arr2 <span class="token comment">// false</span>
arr3 <span class="token operator">==</span> arr1 <span class="token comment">// true</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// false</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// false</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6269\u5C55 \u5982\u4F55\u4F7F\u5F97 (a==1 &amp;&amp; a==2 &amp;&amp; a==3) \u7684\u503C\u4E3A true ?</p><p><code>\u601D\u8DEF:1.\u5229\u7528\u9690\u5F0F\u8F6C\u6362\u89C4\u5219 2.Object.defineProperty</code>;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span> \u5229\u7528\u9690\u5F0F\u8F6C\u6362\u89C4\u5219
<span class="token comment">// a\u662F\u4E00\u4E2A\u5BF9\u8C61</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
   value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> a<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
\u6216\u8005
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
   value<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token function-variable function">valueOf</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> a<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// a\u662F\u4E00\u4E2A\u6570\u7EC4</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ol start="2"><li>\u5229\u7528 Object.defineProperty()</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="indexof-\u548C-includes-\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#indexof-\u548C-includes-\u7684\u533A\u522B" aria-hidden="true">#</a> indexOf() \u548C includes() \u7684\u533A\u522B</h2><p>\u552F\u4E00\u533A\u522B : includes \u80FD\u533A\u5206\u51FA NaN</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,33);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
